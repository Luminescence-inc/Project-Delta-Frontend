* {
  margin: 0;
  padding: 0;
  box-sizing: border-box;
}

:root {
  --primary-color: #0e2d52;
  --secondary-color: #d82c2c;
  --white-color: #ffffff;
  --black-color: #000000;
  --light-grey: #f9f9f9;
}

@font-face {
  font-family: "HelveticaNeue-Bold";
  src: url("../assets/fonts/HelveticaNeueBold.otf");
}

@font-face {
  font-family: "HelveticaNeue-Light";
  src: url("../assets/fonts/HelveticaNeueLight.otf");
}

@font-face {
  font-family: "HelveticaNeue-Medium";
  src: url("../assets/fonts/HelveticaNeueMedium.otf");
}

#app-container {
  display: flex;
  flex-direction: column;
  min-height: 100vh;
}

body {
  color: var(--primary-color);
  font-family: "Inter", sans-serif;
  font-weight: 400;
  line-height: 24px;
  background-color: #f6f8fa;
}

a {
  text-decoration: none;
  color: inherit;
}

main {
  flex-grow: 1;
  margin: 0;
  padding: 0;
}

img {
  width: 100%;
}

.icon {
  &-menu,
  &-cancel {
    width: 24px;
    height: 20px;

    &:after {
      content: "";
      position: absolute;
      top: -35px;
      bottom: -35px;
      left: -35px;
      right: -35px;
    }

    & > path {
      fill: var(--primary-color);
    }
  }
}

.ntw {
  // positioning
  &.relative {
    position: relative;
  }
  &.absolute {
    position: absolute;
  }

  &.fixed {
    position: fixed;
  }

  // flex box
  &.flex {
    display: flex;
  }

  &.flex-wrap {
    @extend .flex;
    flex-wrap: wrap;
  }

  &.flex-col {
    @extend .flex;
    flex-direction: column;
  }

  &.flex-row {
    @extend .flex;
    flex-direction: row;
  }

  &.justify-center {
    @extend .flex;
    justify-content: center;
  }

  &.items-center {
    @extend .flex;
    align-items: center;
  }

  &.items-start {
    @extend .flex;
    align-items: flex-start;
  }

  &.justify-start {
    @extend .flex;
    justify-content: flex-start;
  }

  &.justify-between {
    @extend .flex;
    justify-content: space-between;
  }

  &.justify-around {
    @extend .flex;
    justify-content: space-around;
  }

  &.justify-evenly {
    @extend .flex;
    justify-content: space-evenly;
  }

  &.justify-end {
    @extend .flex;
    justify-content: flex-end;
  }

  // dynamic gap
  @for $i from 0 through 100 {
    &.gap-#{$i} {
      gap: $i + px;
    }
  }

  // custom dynamic width
  &.w-auto {
    width: auto;
  }
  &.w-full {
    width: 100%;
  }
  &.w-screen {
    width: 100vw;
  }
  & .w-50 {
    width: 50%;
  }
  &.w-25 {
    width: 25%;
  }

  // custom dynamic height
  &.h-auto {
    height: auto;
  }
  &.h-full {
    height: 100%;
  }
  &.h-screen {
    height: 100vh;
  }
  &.h-50 {
    height: 50%;
  }
  &.h-25 {
    height: 25%;
  }

  @for $i from 0 through 1000 {
    &.h-#{$i} {
      height: $i + px;
    }

    &.w-#{$i} {
      width: $i + px;
    }

    &.min-h-#{$i} {
      min-height: $i + px;
    }

    &.min-w-#{$i} {
      min-width: $i + px;
    }

    &.max-h-#{$i} {
      max-height: $i + px;
    }

    &.max-w-#{$i} {
      max-width: $i + px;
    }
  }

  // text-[size] like tailwindcss text-[size]
  // allow for passing in custom values for eg text-[4px] or text-[2em]
  @for $i from 1 through 30 {
    &.text-#{$i} {
      font-size: $i + px;
    }
  }

  // dynamic stylesm like tailwindcss px-[number] or py-[number]
  @for $i from 1 through 100 {
    &.p-#{$i} {
      padding: $i + px;
    }

    &.px-#{$i} {
      padding-left: $i + px;
      padding-right: $i + px;
    }

    &.py-#{$i} {
      padding-top: $i + px;
      padding-bottom: $i + px;
    }

    &.pt-#{$i} {
      padding-top: $i + px;
    }

    &.pb-#{$i} {
      padding-bottom: $i + px;
    }

    // margin
    &.mx-#{$i} {
      margin-left: $i + px;
      margin-right: $i + px;
    }

    &.my-#{$i} {
      margin-top: $i + px;
      margin-bottom: $i + px;
    }

    &.mt-#{$i} {
      margin-top: $i + px;
    }

    &.mb-#{$i} {
      margin-bottom: $i + px;
    }

    &.ml-#{$i} {
      margin-left: $i + px;
    }

    // positioning
    &.top-#{$i} {
      top: $i + px;
    }
    &.left-#{$i} {
      left: $i + px;
    }
    &.right-#{$i} {
      right: $i + px;
    }
    &.bottom-#{$i} {
      bottom: $i + px;
    }
  }

  // for font-weight like tailwindcss font-bold/normal/light/medium/semibold/bold/extrabold

  $font-weights: (
    normal: 400,
    light: 300,
    medium: 500,
    semibold: 600,
    bold: 700,
    extrabold: 800,
  );

  @each $key, $value in $font-weights {
    &.font-#{$key} {
      font-weight: $value;
    }
  }

  // Custom Local Fonts families
  $font-families: (
    hn-bold: "HelveticaNeue-Bold",
    hn-light: "HelveticaNeue-Light",
    hn-medium: "HelveticaNeue-Medium",
  );

  @each $key, $value in $font-families {
    &.font-#{$key} {
      font-family: $value;
    }
  }

  // Letter spacing
  @for $i from 1 through 100 {
    &.tracking-#{$i} {
      letter-spacing: $i + px;
    }
  }

  &.underline {
    text-decoration: underline;
  }

  &.uppercase {
    text-transform: uppercase;
  }

  &.lowercase {
    text-transform: lowercase;
  }

  &.capitalize {
    text-transform: capitalize;
  }

  &.text-center {
    text-align: center;
  }

  &.text-left {
    text-align: left;
  }

  &.text-right {
    text-align: right;
  }

  &.text-justify {
    text-align: justify;
  }

  &.text-white {
    color: var(--white-color);
  }

  &.text-black {
    color: var(--black-color);
  }

  // Lineheight
  @for $i from 1 through 100 {
    &.leading-#{$i} {
      line-height: $i / 10;
    }
  }

  &.bg-white {
    background-color: var(--white-color);
  }

  &.bg-black {
    background-color: var(--black-color);
  }

  &.bg-primary {
    background-color: var(--primary-color);
  }

  &.bg-none {
    background: none;
  }

  // fonts
  &.font-sans {
    font-family: "Inter", sans-serif;
  }
  &.font-helvetical {
    font-family: "Helvetical", sans-serif;
  }

  // rounded corners
  @for $i from 1 through 1000 {
    &.rounded-#{$i} {
      border-radius: $i + px;
    }
  }

  // borders / outlines
  &.border-none {
    border: none;
  }
  &.outline-none {
    outline: none;
  }

  // cursors
  $cursors: (
    pointer: pointer,
    not-allowed: not-allowed,
    grab: grab,
    grabbing: grabbing,
  );

  @each $key, $value in $cursors {
    &.cursor-#{$key} {
      cursor: $value;
    }
  }

  // scales
  @for $i from 1 through 100 {
    &.scale-#{$i} {
      transform: scale($i / 10);
    }
  }

  .overflow-hidden {
    overflow: hidden;
  }

  .overflow-auto {
    overflow: auto;
  }

  .overflow-x-hidden {
    overflow-x: hidden;
  }

  .overflow-y-hidden {
    overflow-y: hidden;
  }

  // transitions
  &.transition-all {
    transition: all 0.3s ease;
  }

  &.transition-opacity {
    transition: opacity 0.3s ease;
  }

  // delay
  @for $i from 1 through 100 {
    &.delay-#{$i} {
      transition-delay: $i + ms;
    }
  }
}
